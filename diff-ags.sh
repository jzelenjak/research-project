#!/bin/bash
# Compares two AGs based on the nodes and edges that they have (presumably, AGs generated by the original and modified algorithms respectively).
#
# If two .dot files with AGs are provided, then they are compared with each other.
#   - If running in quiet mode (i.e. option -q , inspired by the "quick diff"), the script:
#       - Prints that the graphs are different if at least one node or edge has been found by only one of the algorithms (exit code 1)
#       - Prints nothing if there are no nodes or edges found by only one of the algorithms (exit code 0)
#   - If running in normal mode (i.e. with no options), then stats generated by `diff-nodes.sh` and `diff-edges.sh` are printed.
# If two directories are provided, then every pair of corresponding AGs is compared against each other (recursively).
#   - The AGs that are different are reported.
#   - To count the number of different AGs in the input directories, pipe the output to `wc` command (e.g. `./diff-ags.sh orig-2017AGs/ merged-sinks-2017AGs/ | wc -l`).
#   - NB! Only the AGs present in both directories are compared. The ones that are present only in one of the directories are ignored.
#
# Note: The comparison is purely based on the node and edges of the graphs (their names and labels, to be precise).
#       See also comments for `diff-nodes.sh` and `diff-edges.sh`.
#
# NB! This script assumes that the directory with the AGs has the name ExpNameAGs/ and that the AG files also have ExpName in their name (i.e. the name has not been changed).
#     To avoid potential errors, please only use alphanumeric characters in the name of the experiments (i.e. no whitespaces, enters etc.).
#
# NB! This script is based on .dot files, which are by default deleted during the execution of SAGE.
#      To prevent the deletion, set the DOCKER variable to False (in SAGE).

set -euo pipefail
IFS=$'\n\t'

umask 077

usage() {
    echo -e "Usage: $0 [-q] originalAG.dot modifiedAG.dot\n       $0 originalAGs/ modifiedAGs/\n
        -q\treport only when attack graphs differ (do not print differences; can only be used with the .dot files)"
}

# If two arguments are provided, assume "normal" mode
if [[ $# -eq 2 ]]; then 
    original="$1"
    modified="$2"
    mode="normal"
# If three arguments are provided, assume "quiet" mode (the first argument has to be the option -q)
elif [[ $# -eq 3 ]]; then
    while getopts "q" option; do
        case ${option} in
            q ) mode="quiet" ;;
            \? ) { usage >&2; exit 1; } ;;
        esac
    done

    original="$2"
    modified="$3"
# The number of arguments can only be two or three
else
    usage >&2
    exit 1
fi

# Comparing two .dot files with AGs
if [[ "${original##*.}" == "dot" ]] && [[ "${modified##*.}" == "dot" ]]; then
    # Check that both files exist
    ! [[ -f "$original" ]] && { echo "$0: file $original does not exist" >&2 ; exit 1 ; }
    ! [[ -f "$modified" ]] && { echo "$0: file $modified does not exist" >&2 ; exit 1 ; }

    # When running in quiet mode, report if the graphs are different or exit quietly if they are the same
    if [[ "$mode" == "quiet" ]]; then
        ./diff-nodes.sh -q "$original" "$modified" 1> /dev/null && ./diff-edges.sh -q "$original" "$modified" 1> /dev/null || { echo "Attack graphs $original and $modified are different" ; exit 1 ; }
    # When running in normal mode, show the common nodes and edges, and nodes and edges that are present in only one of the graphs (and their counts)
    else
        ./diff-nodes.sh "$original" "$modified"
        echo "--------------------------------"
        ./diff-edges.sh "$original" "$modified"
    fi
# Comparing two directories with .dot files with AGs
elif [[ -d "$original" ]] && [[ -d "$modified" ]] && [[ "$mode" == "normal" ]]; then
    # Check if the input directories exist
    original=$(echo "$original/" | tr -s '/')
    modified=$(echo "$modified/" | tr -s '/')
    ! [[ -d "$original" ]] && { echo "$0: directory $original does not exist" >&2 ; exit 1 ; }
    ! [[ -d "$modified" ]] && { echo "$0: directory $modified does not exist" >&2 ; exit 1 ; }

    # Resolve experiment names (i.e. remove the `AGs` part from the names of the directories)
    exp_original=$(echo "$original" | sed 's@AGs/@@')
    exp_modified=$(echo "$modified" | sed 's@AGs/@@')

    # This is the prefix used in every AG file name (ExpName-prefix-victim-mcatmserv)
    prefix="-attack-graph-for-victim-"

    # Actually compare the corresponding AGs in the input directories 
    # First, find the AGs that are present in both directories (compare the file names without the experiment name and the prefix)
    comm -12 <(find "$original" -type f -name '*.dot' -printf '%f\n' | sed 's@'"${exp_original}\.txt${prefix}"'@@' | sort)\
             <(find "$modified" -type f -name '*.dot' -printf '%f\n' | sed 's@'"${exp_modified}\.txt${prefix}"'@@' | sort) |
             sed 's@^\(.*\)$@./diff-ags.sh -q '"${original}${exp_original}\.txt${prefix}"'\1 '"${modified}${exp_modified}\.txt${prefix}"'\1@' |     # Create the commands for the shell
         sh |                                                                                                                                       # Execute these commands 
         sed 's/^.*'"$prefix"'\(.*\)\.dot.*$/\1/' | sed 's/^\([0-9.]\+\)-/\1|/' | sed 's/\([A-Z]\+\)/\1|/'  # This line just creares consistent name (victim|mcat|mserv), instead of the default message
else
   usage >&2
   exit 1 
fi

