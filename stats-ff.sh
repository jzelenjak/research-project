#!/bin/bash
# Computes the number of red, blue and white nodes generated by FlexFringe.
# First it resolves the experiment name (ExpName) to the corresponding FlexFringe .dot files and then computes the statistics.
#
# NB! It is assumed that FlexFringe has been run with parameters `printwhite = 1` and `printblue = 1`.
#
# NB! This script is based on .dot files, which are by default deleted during the execution of SAGE.
#      To prevent the deletion, set the DOCKER variable to False (in SAGE).

set -euo pipefail
IFS=$'\n\t'

umask 077

function usage(){
    echo "Usage: $0 ExpName"
}

# Check if exactly one argument is provided
[[ $# -ne 1 ]] && { usage >&2 ; exit 1; }

# Resolve the FlexFringe files based on the experiment name
core="${1}.txt.ff.final.dot"
# This is not really needed, but in case you want to investigate only sinks when running with `outputsinks = 1`, you can replace `core` with `sinks` below (for white)
# sinks="${1}.txt.ff.finalsinks.dot"

# Check if these FlexFringe file(s) exist
! [[ -f "$core" ]] && { echo "$0: file $core does not exits" >&2 ; exit 1 ; }
# ! [[ -f "$sinks" ]] && { echo "$0: file $sinks does not exits" >&2 ; exit 1 ; }

# Compute the statistics on the states of the resulting S-PDFA learned by FlexFringe
# Red states are coloured "firebrick1", blue states "dodgerblue1" and white states (sinks) "ghostwhite"
red=$(gvpr -q 'N [ $.fillcolor == "firebrick1" ] { print($.name) }' $core | wc -l)
blue=$(gvpr -q 'N [ $.fillcolor == "dodgerblue1" ] { print($.name) }' $core | wc -l)
white=$(gvpr -q 'N [ $.fillcolor == "ghostwhite" ] { print($.name) }' $core | wc -l)
total=$((red + blue + white))

# Print the resulting state counts as well as their percentage of the total
echo "Total red states (core): $red ($(echo "scale=3; 100 * $red / $total" | bc)%)"
echo "Total blue states: $blue ($(echo "scale=3; 100 * $blue / $total" | bc)%)"
echo "Total white states (sinks): $white ($(echo "scale=3; 100 * $white / $total" | bc)%)"
echo "Total states (red + blue + white): $total"

